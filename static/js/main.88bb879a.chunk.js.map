{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","questions","questionText","answerOptions","answerText","isCorrect","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","className","length","map","answer","onClick","nextQuestion","handleAnswerButtonClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAsFeA,MApFf,WACE,IAAMC,EAAY,CAChB,CACEC,aAAc,gCACdC,cAAe,CACb,CAAEC,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,OAAQC,WAAW,GACjC,CAAED,WAAY,SAAUC,WAAW,KAGvC,CACEH,aAAc,wBACdC,cAAe,CACb,CAAEC,WAAY,aAAcC,WAAW,GACvC,CAAED,WAAY,YAAaC,WAAW,GACtC,CAAED,WAAY,aAAcC,WAAW,GACvC,CAAED,WAAY,aAAcC,WAAW,KAG3C,CACEH,aAAc,oCACdC,cAAe,CACb,CAAEC,WAAY,WAAYC,WAAW,GACrC,CAAED,WAAY,YAAaC,WAAW,GACtC,CAAED,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,WAAYC,WAAW,KAGzC,CACEH,aAAc,wBACdC,cAAe,CACb,CAAEC,WAAY,UAAWC,WAAW,GACpC,CAAED,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,SAAUC,WAAW,GACnC,CAAED,WAAY,YAAaC,WAAW,MAnC/B,EAuCiCC,mBAAS,GAvC1C,mBAuCNC,EAvCM,KAuCWC,EAvCX,OAwCqBF,oBAAS,GAxC9B,mBAwCNG,EAxCM,KAwCKC,EAxCL,OAyCaJ,mBAAS,GAzCtB,mBAyCNK,EAzCM,KAyCCC,EAzCD,KAuDb,OACE,qBAAKC,UAAU,MAAf,SACGJ,EACC,sBAAKI,UAAU,gBAAf,wBACcF,EADd,WAC6BV,EAAUa,UAGvC,gCACE,sBAAKD,UAAU,mBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,6CAAgBN,EAAkB,KADpC,IAC+CN,EAAUa,UAEzD,qBAAKD,UAAU,gBAAf,SACGZ,EAAUM,GAAiBL,kBAGhC,qBAAKW,UAAU,iBAAf,SACGZ,EAAUM,GAAiBJ,cAAcY,KAAI,SAACC,GAAD,OAC5C,wBAAQC,QAAS,kBA9BG,SAACZ,GAC3BA,GACFO,EAASD,EAAQ,GAEnB,IAAMO,EAAeX,EAAkB,EACnCW,EAAejB,EAAUa,OAC3BN,EAAmBU,GAEnBR,GAAa,GAsBkBS,CAAwBH,EAAOX,YAAtD,SACGW,EAAOZ,wBChETgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88bb879a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const questions = [\n    {\n      questionText: \"What is the capital of Italy?\",\n      answerOptions: [\n        { answerText: \"Milan\", isCorrect: false },\n        { answerText: \"London\", isCorrect: false },\n        { answerText: \"Rome\", isCorrect: true },\n        { answerText: \"Dublin\", isCorrect: false },\n      ],\n    },\n    {\n      questionText: \"Who is CEO of Amazon?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: true },\n        { answerText: \"Elon Musk\", isCorrect: false },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      questionText: \"What is the capital of Australia?\",\n      answerOptions: [\n        { answerText: \"Canberra\", isCorrect: true },\n        { answerText: \"Melbourbe\", isCorrect: false },\n        { answerText: \"Sydney\", isCorrect: false },\n        { answerText: \"Viktoria\", isCorrect: false },\n      ],\n    },\n    {\n      questionText: \"React was created by:\",\n      answerOptions: [\n        { answerText: \"Samsung\", isCorrect: false },\n        { answerText: \"Amazon\", isCorrect: false },\n        { answerText: \"Goolge\", isCorrect: false },\n        { answerText: \"Faceboook\", isCorrect: true },\n      ],\n    },\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerButtonClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {questions.length}\n        </div>\n      ) : (\n        <div>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">\n              {questions[currentQuestion].questionText}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {questions[currentQuestion].answerOptions.map((answer) => (\n              <button onClick={() => handleAnswerButtonClick(answer.isCorrect)}>\n                {answer.answerText}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}